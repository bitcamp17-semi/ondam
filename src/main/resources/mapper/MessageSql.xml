<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="data.mapper.MessageMapper">


    <!-- 특정 유저의 받은 메시지 목록 조회 (Read) -->
    <select id="readMessagesForReceiver" parameterType="int" resultType="MessagesDto">
        SELECT m.id, m.title,m.content, m.senderid AS senderId, m.receiverid AS receiverId,
               m.isread AS isRead, m.createdat AS createdAt, m.readat AS readAt,m.isImportant,
               u.name AS senderName
        FROM messages m
                 JOIN users u ON m.senderid = u.id
        WHERE m.receiverid = #{receiverId}
        ORDER BY m.createdat DESC
    </select>
    <!-- 메시지 읽음 처리 (Update) -->
    <update id="updateMessageAsRead" parameterType="int">
        UPDATE messages
        SET isread = TRUE, readat = now()
        WHERE id = #{id}
    </update>


    <!-- 마지막 방문 시간 업데이트 (Update) -->
    <update id="updateUserLastVisitTime" parameterType="int">
        INSERT INTO user_last_message_visit (user_id, last_visit_time)
        VALUES (#{userId}, CURRENT_TIMESTAMP)
            ON DUPLICATE KEY UPDATE last_visit_time = CURRENT_TIMESTAMP
    </update>

    <!-- 메시지 삭제 (Delete) -->
    <delete id="deleteMessageById" parameterType="int">
        DELETE FROM messages WHERE id = #{id}
    </delete>

    <!-- 메시지 작성 (Create) -->
    <insert id="createMessage" parameterType="MessagesDto" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO messages (title, content, senderid, receiverid, isread, createdat, readat)
        VALUES (#{title}, #{content}, #{senderId}, #{receiverId}, #{isRead}, now(), #{readAt})
    </insert>


    <!-- 검색 기능 추가 -->
    <select id="readSearchMessagesByKeyword" parameterType="map" resultType="MessagesDto">
        SELECT id, title,content, senderId, receiverId,
               isRead, createdAt, readAt
        FROM messages
        WHERE (
            content LIKE CONCAT('%', #{keyword}, '%')
                OR senderId IN (
                SELECT id FROM users
                WHERE username LIKE CONCAT('%', #{keyword}, '%')
            )
                OR receiverId IN (
                SELECT id FROM users
                WHERE username LIKE CONCAT('%', #{keyword}, '%')
            )
            )
          AND (
            CASE
                WHEN #{category} = 'LATEST' THEN TRUE
                WHEN #{category} = 'IMPORTANT' THEN isImportant = TRUE
                ELSE TRUE
                END
            )
        ORDER BY createdAt DESC
    /*        SELECT id, content, senderid AS senderId, receiverid AS receiverId,
               isread AS isRead, createdat AS createdAt, readat AS readAt
        FROM messages
        WHERE (
                  content LIKE CONCAT('%', #{keyword}, '%')
                      OR senderid IN (SELECT id FROM users WHERE username LIKE CONCAT('%', #{keyword}, '%'))
                      OR receiverid IN (SELECT id FROM users WHERE username LIKE CONCAT('%', #{keyword}, '%'))
                  )
        ORDER BY createdAt DESC*/
    </select>
    <select id="readMessageDetail" parameterType="int" resultType="MessagesDto">
        SELECT id, title,content, senderid AS senderId, receiverid AS receiverId,
               isread AS isRead, createdat AS createdAt, readat AS readAt,isImportant
        FROM messages
        WHERE id = #{id}
    </select>
    <update id="updateMessageImportance" parameterType="map">
        UPDATE messages
        SET isImportant = #{isImportant}
        WHERE id = #{id}
    </update>
    <select id="readCountUnreadMessages" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM messages
        WHERE receiverid = #{receiverId} AND isread = FALSE
    </select>
    <select id="readUnreadMessagesForReceiver" parameterType="int" resultType="MessagesDto">
        SELECT m.id, m.title, m.content, m.senderid AS senderId, m.receiverid AS receiverId,
               m.isread AS isRead, m.createdat AS createdAt, m.readat AS readAt, m.isimportant AS isImportant,
               u.username AS senderName
        FROM messages m
                 JOIN users u ON m.senderid = u.id
        WHERE m.receiverid = #{receiverId} AND m.isread = 0
        ORDER BY m.createdat DESC
    </select>
    <select id="readAllDepartment" resultType="String">
        SELECT DISTINCT d.name
        FROM users u
        JOIN department d ON u.departmentId = d.id
        WHERE d.name IS NOT NULL
          AND d.name != 'admin'
    </select>
    <!-- 부서별 유저 목록 -->
    <select id="readUsersByDepartment" parameterType="String" resultType="UsersDto">
        SELECT u.*
        FROM users u
                 JOIN department d ON u.departmentId = d.id
        WHERE d.name = #{department}
          AND u.isDeleted = 0
    </select>


</mapper>